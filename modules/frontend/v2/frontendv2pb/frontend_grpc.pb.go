// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.2
// source: modules/frontend/v2/frontendv2pb/frontend.proto

package frontendv2pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendForQuerierClient is the client API for FrontendForQuerier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendForQuerierClient interface {
	QueryResult(ctx context.Context, in *QueryResultRequest, opts ...grpc.CallOption) (*QueryResultResponse, error)
}

type frontendForQuerierClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendForQuerierClient(cc grpc.ClientConnInterface) FrontendForQuerierClient {
	return &frontendForQuerierClient{cc}
}

func (c *frontendForQuerierClient) QueryResult(ctx context.Context, in *QueryResultRequest, opts ...grpc.CallOption) (*QueryResultResponse, error) {
	out := new(QueryResultResponse)
	err := c.cc.Invoke(ctx, "/frontendv2pb.FrontendForQuerier/QueryResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FrontendForQuerierServer is the server API for FrontendForQuerier service.
// All implementations must embed UnimplementedFrontendForQuerierServer
// for forward compatibility
type FrontendForQuerierServer interface {
	QueryResult(context.Context, *QueryResultRequest) (*QueryResultResponse, error)
	mustEmbedUnimplementedFrontendForQuerierServer()
}

// UnimplementedFrontendForQuerierServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendForQuerierServer struct {
}

func (UnimplementedFrontendForQuerierServer) QueryResult(context.Context, *QueryResultRequest) (*QueryResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryResult not implemented")
}
func (UnimplementedFrontendForQuerierServer) mustEmbedUnimplementedFrontendForQuerierServer() {}

// UnsafeFrontendForQuerierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendForQuerierServer will
// result in compilation errors.
type UnsafeFrontendForQuerierServer interface {
	mustEmbedUnimplementedFrontendForQuerierServer()
}

func RegisterFrontendForQuerierServer(s grpc.ServiceRegistrar, srv FrontendForQuerierServer) {
	s.RegisterService(&FrontendForQuerier_ServiceDesc, srv)
}

func _FrontendForQuerier_QueryResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendForQuerierServer).QueryResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frontendv2pb.FrontendForQuerier/QueryResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendForQuerierServer).QueryResult(ctx, req.(*QueryResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FrontendForQuerier_ServiceDesc is the grpc.ServiceDesc for FrontendForQuerier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendForQuerier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frontendv2pb.FrontendForQuerier",
	HandlerType: (*FrontendForQuerierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryResult",
			Handler:    _FrontendForQuerier_QueryResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/frontend/v2/frontendv2pb/frontend.proto",
}
