{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='certificateSigningRequestCondition', url='', help='"CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object"'),
  '#withLastTransitionTime':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='lastTransitionTime', type=d.T.string)]),
  withLastTransitionTime(lastTransitionTime): { lastTransitionTime: lastTransitionTime },
  '#withLastUpdateTime':: d.fn(help='"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers."', args=[d.arg(name='lastUpdateTime', type=d.T.string)]),
  withLastUpdateTime(lastUpdateTime): { lastUpdateTime: lastUpdateTime },
  '#withMessage':: d.fn(help='"message contains a human readable message with details about the request state"', args=[d.arg(name='message', type=d.T.string)]),
  withMessage(message): { message: message },
  '#withReason':: d.fn(help='"reason indicates a brief reason for the request state"', args=[d.arg(name='reason', type=d.T.string)]),
  withReason(reason): { reason: reason },
  '#withType':: d.fn(help='"type of the condition. Known conditions are \\"Approved\\", \\"Denied\\", and \\"Failed\\".\\n\\nAn \\"Approved\\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\\n\\nA \\"Denied\\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\\n\\nA \\"Failed\\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\\n\\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\\n\\nOnly one condition of a given type is allowed."', args=[d.arg(name='type', type=d.T.string)]),
  withType(type): { type: type },
  '#mixin': 'ignore',
  mixin: self,
}
