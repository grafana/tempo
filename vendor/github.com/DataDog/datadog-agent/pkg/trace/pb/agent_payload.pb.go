// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent_payload.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// AgentPayload represents payload the agent sends to the intake.
type AgentPayload struct {
	// hostName specifies hostname of where the agent is running.
	HostName string `protobuf:"bytes,1,opt,name=hostName,proto3" json:"hostName,omitempty"`
	// env specifies `env` set in agent configuration.
	Env string `protobuf:"bytes,2,opt,name=env,proto3" json:"env,omitempty"`
	// tracerPayloads specifies list of the payloads received from tracers.
	TracerPayloads []*TracerPayload `protobuf:"bytes,5,rep,name=tracerPayloads,proto3" json:"tracerPayloads,omitempty"`
	// tags specifies tags common in all `tracerPayloads`.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// agentVersion specifies version of the agent.
	AgentVersion string `protobuf:"bytes,7,opt,name=agentVersion,proto3" json:"agentVersion,omitempty"`
	// targetTPS holds `TargetTPS` value in AgentConfig.
	TargetTPS float64 `protobuf:"fixed64,8,opt,name=targetTPS,proto3" json:"targetTPS,omitempty"`
	// errorTPS holds `ErrorTPS` value in AgentConfig.
	ErrorTPS float64 `protobuf:"fixed64,9,opt,name=errorTPS,proto3" json:"errorTPS,omitempty"`
	// rareSamplerEnabled holds `RareSamplerEnabled` value in AgentConfig
	RareSamplerEnabled bool `protobuf:"varint,10,opt,name=rareSamplerEnabled,proto3" json:"rareSamplerEnabled,omitempty"`
}

func (m *AgentPayload) Reset()         { *m = AgentPayload{} }
func (m *AgentPayload) String() string { return proto.CompactTextString(m) }
func (*AgentPayload) ProtoMessage()    {}
func (*AgentPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{0}
}
func (m *AgentPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AgentPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AgentPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AgentPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AgentPayload.Merge(m, src)
}
func (m *AgentPayload) XXX_Size() int {
	return m.Size()
}
func (m *AgentPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_AgentPayload.DiscardUnknown(m)
}

var xxx_messageInfo_AgentPayload proto.InternalMessageInfo

func (m *AgentPayload) GetHostName() string {
	if m != nil {
		return m.HostName
	}
	return ""
}

func (m *AgentPayload) GetEnv() string {
	if m != nil {
		return m.Env
	}
	return ""
}

func (m *AgentPayload) GetTracerPayloads() []*TracerPayload {
	if m != nil {
		return m.TracerPayloads
	}
	return nil
}

func (m *AgentPayload) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AgentPayload) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *AgentPayload) GetTargetTPS() float64 {
	if m != nil {
		return m.TargetTPS
	}
	return 0
}

func (m *AgentPayload) GetErrorTPS() float64 {
	if m != nil {
		return m.ErrorTPS
	}
	return 0
}

func (m *AgentPayload) GetRareSamplerEnabled() bool {
	if m != nil {
		return m.RareSamplerEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*AgentPayload)(nil), "pb.AgentPayload")
	proto.RegisterMapType((map[string]string)(nil), "pb.AgentPayload.TagsEntry")
}

func init() { proto.RegisterFile("agent_payload.proto", fileDescriptor_bddccf659a49dc88) }

var fileDescriptor_bddccf659a49dc88 = []byte{
	// 306 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xbd, 0x4e, 0xf3, 0x40,
	0x10, 0xcc, 0x39, 0x5f, 0xf2, 0xc5, 0x4b, 0x84, 0xe0, 0x48, 0x71, 0xb2, 0x90, 0x65, 0xa5, 0x72,
	0xe5, 0x02, 0x0a, 0x7e, 0x3a, 0x90, 0xd2, 0xa2, 0xc8, 0x89, 0x68, 0xd1, 0x9a, 0xac, 0x0c, 0xc2,
	0xf1, 0x59, 0xeb, 0x23, 0x52, 0xde, 0x82, 0xc7, 0xa2, 0x4c, 0x49, 0x89, 0x92, 0x9e, 0x67, 0x40,
	0x77, 0x89, 0x42, 0x82, 0xe8, 0x76, 0x66, 0x76, 0x4e, 0xb3, 0x73, 0x70, 0x82, 0x39, 0x95, 0xe6,
	0xa1, 0xc2, 0x79, 0xa1, 0x71, 0x92, 0x54, 0xac, 0x8d, 0x96, 0x5e, 0x95, 0x05, 0x3d, 0xc3, 0xf8,
	0x48, 0xbc, 0xaf, 0xf4, 0xbf, 0x3c, 0xe8, 0xde, 0x58, 0xc7, 0x70, 0x4d, 0xcb, 0x00, 0x3a, 0x4f,
	0xba, 0x36, 0x77, 0x38, 0x25, 0x25, 0x22, 0x11, 0xfb, 0xe9, 0x16, 0xcb, 0x23, 0x68, 0x52, 0x39,
	0x53, 0x9e, 0xa3, 0xed, 0x28, 0xaf, 0xe0, 0x70, 0xfd, 0xec, 0xc6, 0x5e, 0xab, 0x56, 0xd4, 0x8c,
	0x0f, 0xce, 0x8e, 0x93, 0x2a, 0x4b, 0xc6, 0xbb, 0x4a, 0xfa, 0x6b, 0x51, 0x26, 0xf0, 0xcf, 0x60,
	0x5e, 0xab, 0xb6, 0x33, 0x04, 0xd6, 0xb0, 0x1b, 0x24, 0x19, 0x63, 0x5e, 0x0f, 0x4a, 0xc3, 0xf3,
	0xd4, 0xed, 0xc9, 0x3e, 0x74, 0xdd, 0x69, 0xf7, 0xc4, 0xf5, 0xb3, 0x2e, 0xd5, 0x7f, 0x97, 0x62,
	0x8f, 0x93, 0xa7, 0xe0, 0x1b, 0xe4, 0x9c, 0xcc, 0x78, 0x38, 0x52, 0x9d, 0x48, 0xc4, 0x22, 0xfd,
	0x21, 0xec, 0x69, 0xc4, 0xac, 0xd9, 0x8a, 0xbe, 0x13, 0xb7, 0x58, 0x26, 0x20, 0x19, 0x99, 0x46,
	0x38, 0xad, 0x0a, 0xe2, 0x41, 0x89, 0x59, 0x41, 0x13, 0x05, 0x91, 0x88, 0x3b, 0xe9, 0x1f, 0x4a,
	0x70, 0x01, 0xfe, 0x36, 0xa0, 0xed, 0xe5, 0x85, 0xe6, 0x9b, 0xba, 0xec, 0x28, 0x7b, 0xd0, 0x9a,
	0x61, 0xf1, 0x4a, 0x9b, 0xae, 0xd6, 0xe0, 0xda, 0xbb, 0x14, 0xb7, 0xea, 0x7d, 0x19, 0x8a, 0xc5,
	0x32, 0x14, 0x9f, 0xcb, 0x50, 0xbc, 0xad, 0xc2, 0xc6, 0x62, 0x15, 0x36, 0x3e, 0x56, 0x61, 0x23,
	0x6b, 0xbb, 0x1f, 0x39, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xf9, 0xd4, 0x6f, 0xc2, 0x01,
	0x00, 0x00,
}

func (m *AgentPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AgentPayload) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HostName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.HostName)))
		i += copy(dAtA[i:], m.HostName)
	}
	if len(m.Env) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Env)))
		i += copy(dAtA[i:], m.Env)
	}
	if len(m.TracerPayloads) > 0 {
		for _, msg := range m.TracerPayloads {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Tags) > 0 {
		for k, _ := range m.Tags {
			dAtA[i] = 0x32
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovAgentPayload(uint64(len(k))) + 1 + len(v) + sovAgentPayload(uint64(len(v)))
			i = encodeVarintAgentPayload(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.AgentVersion) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AgentVersion)))
		i += copy(dAtA[i:], m.AgentVersion)
	}
	if m.TargetTPS != 0 {
		dAtA[i] = 0x41
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TargetTPS))))
		i += 8
	}
	if m.ErrorTPS != 0 {
		dAtA[i] = 0x49
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ErrorTPS))))
		i += 8
	}
	if m.RareSamplerEnabled {
		dAtA[i] = 0x50
		i++
		if m.RareSamplerEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintAgentPayload(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AgentPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HostName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Env)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.TracerPayloads) > 0 {
		for _, e := range m.TracerPayloads {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgentPayload(uint64(len(k))) + 1 + len(v) + sovAgentPayload(uint64(len(v)))
			n += mapEntrySize + 1 + sovAgentPayload(uint64(mapEntrySize))
		}
	}
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.TargetTPS != 0 {
		n += 9
	}
	if m.ErrorTPS != 0 {
		n += 9
	}
	if m.RareSamplerEnabled {
		n += 2
	}
	return n
}

func sovAgentPayload(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAgentPayload(x uint64) (n int) {
	return sovAgentPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AgentPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AgentPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AgentPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Env", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Env = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TracerPayloads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TracerPayloads = append(m.TracerPayloads, &TracerPayload{})
			if err := m.TracerPayloads[len(m.TracerPayloads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgentPayload(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetTPS", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TargetTPS = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorTPS", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ErrorTPS = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RareSamplerEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RareSamplerEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgentPayload
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAgentPayload
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAgentPayload(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAgentPayload
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAgentPayload = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentPayload   = fmt.Errorf("proto: integer overflow")
)
