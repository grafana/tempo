{
  local d = (import 'doc-util/main.libsonnet'),
  '#':: d.pkg(name='v1alpha2', url='', help=''),
  allocationResult: (import 'allocationResult.libsonnet'),
  driverAllocationResult: (import 'driverAllocationResult.libsonnet'),
  driverRequests: (import 'driverRequests.libsonnet'),
  namedResourcesAllocationResult: (import 'namedResourcesAllocationResult.libsonnet'),
  namedResourcesAttribute: (import 'namedResourcesAttribute.libsonnet'),
  namedResourcesFilter: (import 'namedResourcesFilter.libsonnet'),
  namedResourcesInstance: (import 'namedResourcesInstance.libsonnet'),
  namedResourcesIntSlice: (import 'namedResourcesIntSlice.libsonnet'),
  namedResourcesRequest: (import 'namedResourcesRequest.libsonnet'),
  namedResourcesResources: (import 'namedResourcesResources.libsonnet'),
  namedResourcesStringSlice: (import 'namedResourcesStringSlice.libsonnet'),
  podSchedulingContext: (import 'podSchedulingContext.libsonnet'),
  podSchedulingContextSpec: (import 'podSchedulingContextSpec.libsonnet'),
  podSchedulingContextStatus: (import 'podSchedulingContextStatus.libsonnet'),
  resourceClaim: (import 'resourceClaim.libsonnet'),
  resourceClaimConsumerReference: (import 'resourceClaimConsumerReference.libsonnet'),
  resourceClaimParameters: (import 'resourceClaimParameters.libsonnet'),
  resourceClaimParametersReference: (import 'resourceClaimParametersReference.libsonnet'),
  resourceClaimSchedulingStatus: (import 'resourceClaimSchedulingStatus.libsonnet'),
  resourceClaimSpec: (import 'resourceClaimSpec.libsonnet'),
  resourceClaimStatus: (import 'resourceClaimStatus.libsonnet'),
  resourceClaimTemplate: (import 'resourceClaimTemplate.libsonnet'),
  resourceClaimTemplateSpec: (import 'resourceClaimTemplateSpec.libsonnet'),
  resourceClass: (import 'resourceClass.libsonnet'),
  resourceClassParameters: (import 'resourceClassParameters.libsonnet'),
  resourceClassParametersReference: (import 'resourceClassParametersReference.libsonnet'),
  resourceFilter: (import 'resourceFilter.libsonnet'),
  resourceHandle: (import 'resourceHandle.libsonnet'),
  resourceRequest: (import 'resourceRequest.libsonnet'),
  resourceSlice: (import 'resourceSlice.libsonnet'),
  structuredResourceHandle: (import 'structuredResourceHandle.libsonnet'),
  vendorParameters: (import 'vendorParameters.libsonnet'),
}
