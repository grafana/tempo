package parquetquery

/*
--- DO NOT EDIT THIS FILE ---

This file is generated from a template defined in ./pkg/parquetquerygen/predicates.go. To create this file run
go run ./predicates.go > ../parquetquery/predicates_gen.go
*/

import (
	"fmt"

	pq "github.com/parquet-go/parquet-go"
)

var _ Predicate = (*IntEqualPredicate)(nil)

type IntEqualPredicate struct {
	value int64
}

func NewIntEqualPredicate(val int64) IntEqualPredicate {
	return IntEqualPredicate{value: val}
}

func (p IntEqualPredicate) String() string {
	return fmt.Sprintf("IntEqualPredicate{%d}", p.value)
}

func (p IntEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Int64()
			max := ci.MaxValue(i).Int64()

			if min <= p.value && p.value <= max {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, maxV, ok := page.Bounds()
	if ok {
		min := minV.Int64()
		max := maxV.Int64()

		return min <= p.value && p.value <= max
	}

	

	return true
}

func (p IntEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv == p.value
}



var _ Predicate = (*IntNotEqualPredicate)(nil)

type IntNotEqualPredicate struct {
	value int64
}

func NewIntNotEqualPredicate(val int64) IntNotEqualPredicate {
	return IntNotEqualPredicate{value: val}
}

func (p IntNotEqualPredicate) String() string {
	return fmt.Sprintf("IntNotEqualPredicate{%d}", p.value)
}

func (p IntNotEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Int64()
			max := ci.MaxValue(i).Int64()

			if min != p.value || p.value != max {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntNotEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, maxV, ok := page.Bounds()
	if ok {
		min := minV.Int64()
		max := maxV.Int64()

		return min != p.value || p.value != max
	}

	

	return true
}

func (p IntNotEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv != p.value
}



var _ Predicate = (*IntGreaterPredicate)(nil)

type IntGreaterPredicate struct {
	value int64
}

func NewIntGreaterPredicate(val int64) IntGreaterPredicate {
	return IntGreaterPredicate{value: val}
}

func (p IntGreaterPredicate) String() string {
	return fmt.Sprintf("IntGreaterPredicate{%d}", p.value)
}

func (p IntGreaterPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			
			max := ci.MaxValue(i).Int64()

			if max > p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntGreaterPredicate) KeepPage(page pq.Page) bool {
	

	_, maxV, ok := page.Bounds()
	if ok {
		
		max := maxV.Int64()

		return max > p.value
	}

	

	return true
}

func (p IntGreaterPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv > p.value
}



var _ Predicate = (*IntGreaterEqualPredicate)(nil)

type IntGreaterEqualPredicate struct {
	value int64
}

func NewIntGreaterEqualPredicate(val int64) IntGreaterEqualPredicate {
	return IntGreaterEqualPredicate{value: val}
}

func (p IntGreaterEqualPredicate) String() string {
	return fmt.Sprintf("IntGreaterEqualPredicate{%d}", p.value)
}

func (p IntGreaterEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			
			max := ci.MaxValue(i).Int64()

			if max >= p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntGreaterEqualPredicate) KeepPage(page pq.Page) bool {
	

	_, maxV, ok := page.Bounds()
	if ok {
		
		max := maxV.Int64()

		return max >= p.value
	}

	

	return true
}

func (p IntGreaterEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv >= p.value
}



var _ Predicate = (*IntLessPredicate)(nil)

type IntLessPredicate struct {
	value int64
}

func NewIntLessPredicate(val int64) IntLessPredicate {
	return IntLessPredicate{value: val}
}

func (p IntLessPredicate) String() string {
	return fmt.Sprintf("IntLessPredicate{%d}", p.value)
}

func (p IntLessPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Int64()
			

			if min < p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntLessPredicate) KeepPage(page pq.Page) bool {
	

	minV, _, ok := page.Bounds()
	if ok {
		min := minV.Int64()
		

		return min < p.value
	}

	

	return true
}

func (p IntLessPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv < p.value
}



var _ Predicate = (*IntLessEqualPredicate)(nil)

type IntLessEqualPredicate struct {
	value int64
}

func NewIntLessEqualPredicate(val int64) IntLessEqualPredicate {
	return IntLessEqualPredicate{value: val}
}

func (p IntLessEqualPredicate) String() string {
	return fmt.Sprintf("IntLessEqualPredicate{%d}", p.value)
}

func (p IntLessEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Int64()
			

			if min <= p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p IntLessEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, _, ok := page.Bounds()
	if ok {
		min := minV.Int64()
		

		return min <= p.value
	}

	

	return true
}

func (p IntLessEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Int64()
	return vv <= p.value
}




var _ Predicate = (*FloatEqualPredicate)(nil)

type FloatEqualPredicate struct {
	value float64
}

func NewFloatEqualPredicate(val float64) FloatEqualPredicate {
	return FloatEqualPredicate{value: val}
}

func (p FloatEqualPredicate) String() string {
	return fmt.Sprintf("FloatEqualPredicate{%f}", p.value)
}

func (p FloatEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Double()
			max := ci.MaxValue(i).Double()

			if min <= p.value && p.value <= max {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, maxV, ok := page.Bounds()
	if ok {
		min := minV.Double()
		max := maxV.Double()

		return min <= p.value && p.value <= max
	}

	

	return true
}

func (p FloatEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv == p.value
}



var _ Predicate = (*FloatNotEqualPredicate)(nil)

type FloatNotEqualPredicate struct {
	value float64
}

func NewFloatNotEqualPredicate(val float64) FloatNotEqualPredicate {
	return FloatNotEqualPredicate{value: val}
}

func (p FloatNotEqualPredicate) String() string {
	return fmt.Sprintf("FloatNotEqualPredicate{%f}", p.value)
}

func (p FloatNotEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Double()
			max := ci.MaxValue(i).Double()

			if min != p.value || p.value != max {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatNotEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, maxV, ok := page.Bounds()
	if ok {
		min := minV.Double()
		max := maxV.Double()

		return min != p.value || p.value != max
	}

	

	return true
}

func (p FloatNotEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv != p.value
}



var _ Predicate = (*FloatGreaterPredicate)(nil)

type FloatGreaterPredicate struct {
	value float64
}

func NewFloatGreaterPredicate(val float64) FloatGreaterPredicate {
	return FloatGreaterPredicate{value: val}
}

func (p FloatGreaterPredicate) String() string {
	return fmt.Sprintf("FloatGreaterPredicate{%f}", p.value)
}

func (p FloatGreaterPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			
			max := ci.MaxValue(i).Double()

			if max > p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatGreaterPredicate) KeepPage(page pq.Page) bool {
	

	_, maxV, ok := page.Bounds()
	if ok {
		
		max := maxV.Double()

		return max > p.value
	}

	

	return true
}

func (p FloatGreaterPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv > p.value
}



var _ Predicate = (*FloatGreaterEqualPredicate)(nil)

type FloatGreaterEqualPredicate struct {
	value float64
}

func NewFloatGreaterEqualPredicate(val float64) FloatGreaterEqualPredicate {
	return FloatGreaterEqualPredicate{value: val}
}

func (p FloatGreaterEqualPredicate) String() string {
	return fmt.Sprintf("FloatGreaterEqualPredicate{%f}", p.value)
}

func (p FloatGreaterEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			
			max := ci.MaxValue(i).Double()

			if max >= p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatGreaterEqualPredicate) KeepPage(page pq.Page) bool {
	

	_, maxV, ok := page.Bounds()
	if ok {
		
		max := maxV.Double()

		return max >= p.value
	}

	

	return true
}

func (p FloatGreaterEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv >= p.value
}



var _ Predicate = (*FloatLessPredicate)(nil)

type FloatLessPredicate struct {
	value float64
}

func NewFloatLessPredicate(val float64) FloatLessPredicate {
	return FloatLessPredicate{value: val}
}

func (p FloatLessPredicate) String() string {
	return fmt.Sprintf("FloatLessPredicate{%f}", p.value)
}

func (p FloatLessPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Double()
			

			if min < p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatLessPredicate) KeepPage(page pq.Page) bool {
	

	minV, _, ok := page.Bounds()
	if ok {
		min := minV.Double()
		

		return min < p.value
	}

	

	return true
}

func (p FloatLessPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv < p.value
}



var _ Predicate = (*FloatLessEqualPredicate)(nil)

type FloatLessEqualPredicate struct {
	value float64
}

func NewFloatLessEqualPredicate(val float64) FloatLessEqualPredicate {
	return FloatLessEqualPredicate{value: val}
}

func (p FloatLessEqualPredicate) String() string {
	return fmt.Sprintf("FloatLessEqualPredicate{%f}", p.value)
}

func (p FloatLessEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	ci, err := c.ColumnIndex()
	if err == nil && ci != nil {
		for i := 0; i < ci.NumPages(); i++ {
			min := ci.MinValue(i).Double()
			

			if min <= p.value {
				return true
			}
		}
		return false
	}

	

	return true
}

func (p FloatLessEqualPredicate) KeepPage(page pq.Page) bool {
	

	minV, _, ok := page.Bounds()
	if ok {
		min := minV.Double()
		

		return min <= p.value
	}

	

	return true
}

func (p FloatLessEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Double()
	return vv <= p.value
}




var _ Predicate = (*BoolEqualPredicate)(nil)

type BoolEqualPredicate struct {
	value bool
}

func NewBoolEqualPredicate(val bool) BoolEqualPredicate {
	return BoolEqualPredicate{value: val}
}

func (p BoolEqualPredicate) String() string {
	return fmt.Sprintf("BoolEqualPredicate{%t}", p.value)
}

func (p BoolEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	return true
}

func (p BoolEqualPredicate) KeepPage(page pq.Page) bool {
	

	return true
}

func (p BoolEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Boolean()
	return vv == p.value
}



var _ Predicate = (*BoolNotEqualPredicate)(nil)

type BoolNotEqualPredicate struct {
	value bool
}

func NewBoolNotEqualPredicate(val bool) BoolNotEqualPredicate {
	return BoolNotEqualPredicate{value: val}
}

func (p BoolNotEqualPredicate) String() string {
	return fmt.Sprintf("BoolNotEqualPredicate{%t}", p.value)
}

func (p BoolNotEqualPredicate) KeepColumnChunk(c *ColumnChunkHelper) bool {
	if d := c.Dictionary(); d != nil {
		return keepDictionary(d, p.KeepValue)
	}

	

	return true
}

func (p BoolNotEqualPredicate) KeepPage(page pq.Page) bool {
	

	return true
}

func (p BoolNotEqualPredicate) KeepValue(v pq.Value) bool {
	vv := v.Boolean()
	return vv != p.value
}



