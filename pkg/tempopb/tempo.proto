syntax="proto3";

package tempopb;

import "trace/v1/trace.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service Pusher {
  // different versions of PushBytes expect the trace data to be pushed in different formats
  rpc PushBytes(PushBytesRequest) returns (PushResponse) {};   // ./pkg/model/v1
  rpc PushBytesV2(PushBytesRequest) returns (PushResponse) {}; // ./pkg/model/v2
}

service MetricsGenerator {
  rpc PushSpans(PushSpansRequest) returns (PushResponse) {};
}

service Querier {
  rpc FindTraceByID(TraceByIDRequest) returns (TraceByIDResponse) {};
  rpc SearchRecent(SearchRequest) returns (SearchResponse) {};
  rpc SearchBlock(SearchBlockRequest) returns (SearchResponse) {};
  rpc SearchTags(SearchTagsRequest) returns (SearchTagsResponse) {};
  rpc SearchTagValues(SearchTagValuesRequest) returns (SearchTagValuesResponse) {};
}

// Read
message TraceByIDRequest {
  bytes traceID = 1;
  string blockStart = 2;
  string blockEnd = 3;
  string queryMode = 5;
}

message TraceByIDResponse {
  Trace trace = 1;
  TraceByIDMetrics metrics = 2;
}

message TraceByIDMetrics {
  uint32 failedBlocks = 1;
}

// SearchRequest takes no block parameters and implies a "recent traces" search
message SearchRequest {
  // case insensitive partial match
  map<string, string> Tags = 1 [(gogoproto.nullable) = false];
  uint32 MinDurationMs = 2;
  uint32 MaxDurationMs = 3;
  uint32 Limit = 4;
  uint32 start = 5;
  uint32 end = 6;
}

// SearchBlockRequest takes SearchRequest parameters as well as all information necessary
// to search a block in the backend.
message SearchBlockRequest {
  SearchRequest searchReq = 1;
  string blockID = 2;
  uint32 startPage = 3;
  uint32 pagesToSearch = 4;
  string encoding = 5;
  uint32 indexPageSize = 6;
  uint32 totalRecords = 7;
  string dataEncoding = 8;
  string version = 9;
}

message SearchResponse {
  repeated TraceSearchMetadata traces = 1;
  SearchMetrics metrics = 2;
}

message TraceSearchMetadata {
  string traceID = 1;
  string rootServiceName = 2;
  string rootTraceName = 3;
  uint64 startTimeUnixNano = 4;
  uint32 durationMs = 5;
}

message SearchMetrics {
  uint32 inspectedTraces = 1;
  uint64 inspectedBytes = 2;
  uint32 inspectedBlocks = 3;
  uint32 skippedBlocks = 4;
  uint32 skippedTraces = 5;
}

message SearchTagsRequest {
}

message SearchTagsResponse {
  repeated string tagNames = 1;
}

message SearchTagValuesRequest {
  string tagName = 1;
}

message SearchTagValuesResponse {
  repeated string tagValues = 1;
}

message Trace {
  repeated tempopb.trace.v1.ResourceSpans batches = 1;
}

// Write
message PushResponse {
}

// PushBytesRequest pushes slices of traces, ids and searchdata. Traces are encoded using the
//  current BatchDecoder in ./pkg/model
message PushBytesRequest {
  // pre-marshalled Traces. length must match ids
  repeated bytes traces = 2 [(gogoproto.nullable) = false, (gogoproto.customtype) = "PreallocBytes"];
  // trace ids. length must match traces
  repeated bytes ids = 3 [(gogoproto.nullable) = false, (gogoproto.customtype) = "PreallocBytes"];
  // search data, length must match traces
  repeated bytes searchData = 4 [(gogoproto.nullable) = false, (gogoproto.customtype) = "PreallocBytes"];
}

message PushSpansRequest {
  // just send entire OTel spans for now
  repeated tempopb.trace.v1.ResourceSpans batches = 1;
}

message TraceBytes {
  // pre-marshalled Traces
  repeated bytes traces = 1;
}