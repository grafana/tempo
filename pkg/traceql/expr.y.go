// Code generated by goyacc -o pkg/traceql/expr.y.go pkg/traceql/expr.y. DO NOT EDIT.

//line pkg/traceql/expr.y:2
package traceql

import __yyfmt__ "fmt"

//line pkg/traceql/expr.y:2

import (
	"time"
)

//line pkg/traceql/expr.y:11
type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation
	selectOperation   SelectOperation
	attributeList     []Attribute

	spansetExpression         SpansetExpression
	spansetPipelineExpression SpansetExpression
	wrappedSpansetPipeline    Pipeline
	spansetPipeline           Pipeline
	spansetFilter             *SpansetFilter
	scalarFilter              ScalarFilter
	scalarFilterOperation     Operator

	scalarPipelineExpressionFilter ScalarFilter
	scalarPipelineExpression       ScalarExpression
	scalarExpression               ScalarExpression
	wrappedScalarPipeline          Pipeline
	scalarPipeline                 Pipeline
	aggregate                      Aggregate
	metricsAggregation             *MetricsAggregate

	fieldExpression      FieldExpression
	static               Static
	intrinsicField       Attribute
	attributeField       Attribute
	attribute            Attribute
	scopedIntrinsicField Attribute

	binOp          Operator
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration
	numericList    []float64

	hint     *Hint
	hintList []*Hint
	hints    *Hints
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const DURATION = 57350
const DOT = 57351
const OPEN_BRACE = 57352
const CLOSE_BRACE = 57353
const OPEN_PARENS = 57354
const CLOSE_PARENS = 57355
const COMMA = 57356
const NIL = 57357
const TRUE = 57358
const FALSE = 57359
const STATUS_ERROR = 57360
const STATUS_OK = 57361
const STATUS_UNSET = 57362
const KIND_UNSPECIFIED = 57363
const KIND_INTERNAL = 57364
const KIND_SERVER = 57365
const KIND_CLIENT = 57366
const KIND_PRODUCER = 57367
const KIND_CONSUMER = 57368
const IDURATION = 57369
const CHILDCOUNT = 57370
const NAME = 57371
const STATUS = 57372
const STATUS_MESSAGE = 57373
const PARENT = 57374
const KIND = 57375
const ROOTNAME = 57376
const ROOTSERVICENAME = 57377
const ROOTSERVICE = 57378
const TRACEDURATION = 57379
const NESTEDSETLEFT = 57380
const NESTEDSETRIGHT = 57381
const NESTEDSETPARENT = 57382
const PARENT_DOT = 57383
const RESOURCE_DOT = 57384
const SPAN_DOT = 57385
const TRACE_COLON = 57386
const SPAN_COLON = 57387
const COUNT = 57388
const AVG = 57389
const MAX = 57390
const MIN = 57391
const SUM = 57392
const BY = 57393
const COALESCE = 57394
const SELECT = 57395
const END_ATTRIBUTE = 57396
const RATE = 57397
const COUNT_OVER_TIME = 57398
const QUANTILE_OVER_TIME = 57399
const WITH = 57400
const PIPE = 57401
const AND = 57402
const OR = 57403
const EQ = 57404
const NEQ = 57405
const LT = 57406
const LTE = 57407
const GT = 57408
const GTE = 57409
const NRE = 57410
const RE = 57411
const DESC = 57412
const ANCE = 57413
const SIBL = 57414
const NOT_CHILD = 57415
const NOT_PARENT = 57416
const NOT_DESC = 57417
const NOT_ANCE = 57418
const UNION_CHILD = 57419
const UNION_PARENT = 57420
const UNION_DESC = 57421
const UNION_ANCE = 57422
const UNION_SIBL = 57423
const ADD = 57424
const SUB = 57425
const NOT = 57426
const MUL = 57427
const DIV = 57428
const MOD = 57429
const POW = 57430

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"COMMA",
	"NIL",
	"TRUE",
	"FALSE",
	"STATUS_ERROR",
	"STATUS_OK",
	"STATUS_UNSET",
	"KIND_UNSPECIFIED",
	"KIND_INTERNAL",
	"KIND_SERVER",
	"KIND_CLIENT",
	"KIND_PRODUCER",
	"KIND_CONSUMER",
	"IDURATION",
	"CHILDCOUNT",
	"NAME",
	"STATUS",
	"STATUS_MESSAGE",
	"PARENT",
	"KIND",
	"ROOTNAME",
	"ROOTSERVICENAME",
	"ROOTSERVICE",
	"TRACEDURATION",
	"NESTEDSETLEFT",
	"NESTEDSETRIGHT",
	"NESTEDSETPARENT",
	"PARENT_DOT",
	"RESOURCE_DOT",
	"SPAN_DOT",
	"TRACE_COLON",
	"SPAN_COLON",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"SELECT",
	"END_ATTRIBUTE",
	"RATE",
	"COUNT_OVER_TIME",
	"QUANTILE_OVER_TIME",
	"WITH",
	"PIPE",
	"AND",
	"OR",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"ANCE",
	"SIBL",
	"NOT_CHILD",
	"NOT_PARENT",
	"NOT_DESC",
	"NOT_ANCE",
	"UNION_CHILD",
	"UNION_PARENT",
	"UNION_DESC",
	"UNION_ANCE",
	"UNION_SIBL",
	"ADD",
	"SUB",
	"NOT",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 273,
	13, 86,
	-2, 94,
}

const yyPrivate = 57344

const yyLast = 907

var yyAct = [...]int{

	101, 5, 100, 6, 99, 8, 218, 7, 263, 98,
	219, 67, 18, 13, 199, 271, 2, 94, 226, 227,
	228, 237, 237, 70, 90, 66, 77, 308, 195, 19,
	20, 21, 147, 17, 148, 155, 151, 30, 149, 224,
	225, 29, 226, 227, 228, 237, 87, 88, 89, 90,
	175, 177, 178, 179, 180, 181, 182, 183, 184, 185,
	186, 187, 188, 189, 190, 191, 192, 316, 315, 23,
	26, 24, 25, 27, 14, 156, 15, 335, 152, 153,
	154, 201, 299, 85, 86, 298, 87, 88, 89, 90,
	297, 296, 320, 222, 319, 221, 321, 220, 209, 211,
	212, 213, 214, 215, 216, 312, 22, 197, 310, 217,
	338, 278, 194, 240, 241, 242, 102, 103, 104, 108,
	131, 194, 93, 95, 264, 309, 107, 105, 106, 110,
	109, 111, 112, 113, 114, 115, 116, 117, 118, 119,
	120, 121, 122, 124, 123, 125, 126, 257, 127, 128,
	129, 130, 134, 132, 133, 135, 136, 268, 313, 258,
	259, 260, 261, 74, 75, 76, 77, 195, 196, 269,
	332, 278, 331, 278, 198, 246, 72, 73, 268, 74,
	75, 76, 77, 330, 329, 336, 229, 230, 231, 232,
	233, 234, 236, 235, 96, 97, 17, 147, 176, 148,
	323, 151, 322, 149, 306, 307, 224, 225, 273, 226,
	227, 228, 237, 247, 248, 48, 53, 270, 275, 50,
	267, 49, 266, 57, 269, 51, 52, 54, 55, 56,
	59, 58, 60, 61, 64, 63, 62, 277, 278, 265,
	202, 158, 279, 280, 281, 282, 283, 284, 285, 286,
	287, 288, 289, 290, 291, 292, 293, 294, 85, 86,
	249, 87, 88, 89, 90, 145, 144, 250, 222, 251,
	221, 143, 220, 142, 67, 141, 67, 140, 311, 222,
	92, 221, 91, 220, 84, 301, 70, 300, 70, 314,
	275, 48, 53, 334, 333, 50, 71, 49, 245, 57,
	244, 51, 52, 54, 55, 56, 59, 58, 60, 61,
	64, 63, 62, 326, 325, 147, 317, 148, 318, 151,
	243, 149, 28, 222, 222, 221, 221, 220, 220, 327,
	328, 262, 137, 138, 139, 324, 69, 222, 305, 221,
	16, 220, 4, 337, 102, 103, 104, 108, 131, 146,
	12, 95, 68, 11, 107, 105, 106, 110, 109, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 124, 123, 125, 126, 10, 127, 128, 129, 130,
	134, 132, 133, 135, 136, 238, 239, 229, 230, 231,
	232, 233, 234, 236, 235, 304, 72, 73, 150, 74,
	75, 76, 77, 1, 0, 303, 0, 224, 225, 0,
	226, 227, 228, 237, 0, 78, 79, 80, 81, 82,
	83, 0, 96, 97, 200, 203, 204, 205, 206, 207,
	208, 0, 0, 0, 302, 85, 86, 0, 87, 88,
	89, 90, 238, 239, 229, 230, 231, 232, 233, 234,
	236, 235, 238, 239, 229, 230, 231, 232, 233, 234,
	236, 235, 0, 295, 224, 225, 0, 226, 227, 228,
	237, 0, 0, 276, 224, 225, 0, 226, 227, 228,
	237, 238, 239, 229, 230, 231, 232, 233, 234, 236,
	235, 252, 0, 253, 255, 256, 0, 254, 0, 0,
	223, 0, 0, 224, 225, 0, 226, 227, 228, 237,
	238, 239, 229, 230, 231, 232, 233, 234, 236, 235,
	238, 239, 229, 230, 231, 232, 233, 234, 236, 235,
	199, 0, 224, 225, 0, 226, 227, 228, 237, 0,
	0, 0, 224, 225, 0, 226, 227, 228, 237, 238,
	239, 229, 230, 231, 232, 233, 234, 236, 235, 193,
	0, 0, 0, 0, 0, 78, 79, 80, 81, 82,
	83, 224, 225, 0, 226, 227, 228, 237, 0, 78,
	79, 80, 81, 82, 83, 72, 73, 0, 74, 75,
	76, 77, 0, 0, 0, 0, 0, 0, 0, 85,
	86, 0, 87, 88, 89, 90, 31, 36, 0, 0,
	33, 0, 32, 0, 42, 0, 34, 35, 37, 38,
	39, 40, 41, 43, 44, 45, 46, 47, 31, 36,
	0, 0, 33, 0, 32, 0, 42, 0, 34, 35,
	37, 38, 39, 40, 41, 43, 44, 45, 46, 47,
	19, 20, 21, 0, 17, 0, 155, 0, 19, 20,
	21, 0, 17, 0, 274, 0, 19, 20, 21, 50,
	17, 49, 272, 57, 0, 51, 52, 54, 55, 56,
	59, 58, 60, 61, 64, 63, 62, 0, 0, 0,
	23, 26, 24, 25, 27, 14, 156, 15, 23, 26,
	24, 25, 27, 14, 0, 15, 23, 26, 24, 25,
	27, 14, 0, 15, 0, 0, 19, 20, 21, 0,
	17, 0, 9, 0, 19, 20, 21, 22, 17, 0,
	155, 19, 20, 21, 0, 22, 0, 210, 33, 0,
	32, 0, 42, 22, 34, 35, 37, 38, 39, 40,
	41, 43, 44, 45, 46, 47, 23, 26, 24, 25,
	27, 14, 0, 15, 23, 26, 24, 25, 27, 0,
	0, 23, 26, 24, 25, 27, 0, 65, 3, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 22, 0, 0, 0, 0, 0, 0,
	0, 22, 0, 0, 0, 0, 0, 0, 22, 157,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 131, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 119, 120, 121, 122, 124,
	123, 125, 126, 0, 127, 128, 129, 130, 134, 132,
	133, 135, 136, 102, 103, 104, 108, 0, 0, 0,
	202, 0, 0, 107, 105, 106, 110, 109, 111, 112,
	113, 114, 115, 116, 117, 102, 103, 104, 108, 0,
	0, 0, 0, 0, 0, 107, 105, 106, 110, 109,
	111, 112, 113, 114, 115, 116, 117,
}
var yyPact = [...]int{

	710, -17, -22, 568, -1000, 231, -1000, -1000, -1000, 710,
	-1000, 503, -1000, 353, 270, 268, -1000, 111, -1000, -1000,
	-1000, -1000, 326, 265, 263, 261, 259, 254, -1000, 253,
	23, 229, 229, 229, 229, 229, 229, 229, 229, 229,
	229, 229, 229, 229, 229, 229, 229, 229, 186, 186,
	186, 186, 186, 186, 186, 186, 186, 186, 186, 186,
	186, 186, 186, 186, 186, 546, 108, 155, 94, 161,
	517, 858, 228, 228, 228, 228, 228, 228, -1000, -1000,
	-1000, -1000, -1000, -1000, 725, 725, 725, 725, 725, 725,
	725, 339, 817, -1000, 489, 339, 339, 339, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 316, 296, 294, 171, 233, 464, -1000, -1000, -1000,
	134, 339, 339, 339, 339, 120, -1000, 231, -1000, -1000,
	-1000, -1000, 227, 210, 208, 718, 205, 674, 660, -1000,
	-1000, -1000, -1000, 674, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 605, 186, -1000, -1000, -1000,
	-1000, 605, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 644, -1000, -1000, -1000, -1000,
	314, -1000, 652, 78, 78, -62, -62, -62, -62, 176,
	725, -39, -39, -64, -64, -64, -64, 460, 224, -1000,
	-1000, -1000, -1000, -1000, 339, 339, 339, 339, 339, 339,
	339, 339, 339, 339, 339, 339, 339, 339, 339, 339,
	450, -67, -67, 37, 36, 31, 28, 283, 281, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 421, 392,
	382, 325, 191, -1000, -35, 112, 95, 817, 155, 1,
	92, 99, 660, -1000, 652, -31, -1000, -1000, 817, -67,
	-67, -66, -66, -66, -43, -43, -43, -43, -43, -43,
	-43, -43, -66, 124, 124, -1000, -1000, -1000, -1000, -1000,
	14, 13, -1000, -1000, -1000, -1000, -1000, 120, 880, 43,
	41, 82, -1000, 644, -1000, -1000, -1000, -1000, -1000, 190,
	188, 307, 817, 817, 170, -1000, -1000, 159, 157, 287,
	26, -1000, -1000, -1000, -1000, 173, 817, 97, -1000,
}
var yyPgo = [...]int{

	0, 403, 7, 398, 5, 6, 1, 777, 375, 15,
	350, 3, 284, 349, 342, 352, 13, 340, 336, 12,
	17, 9, 4, 2, 0, 10, 335, 8, 331, 322,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 1, 1, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
	7, 7, 7, 7, 7, 8, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 2, 3, 4, 25, 25,
	25, 5, 5, 26, 26, 26, 26, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
	6, 6, 6, 6, 6, 6, 10, 10, 11, 12,
	12, 12, 12, 12, 12, 14, 14, 15, 15, 15,
	15, 15, 15, 15, 15, 17, 18, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 19, 19, 19, 19, 19, 13, 13, 13, 13,
	13, 13, 27, 29, 28, 28, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	20, 20, 20, 20, 20, 20, 20, 20, 20, 21,
	21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 22, 24, 24,
	24, 24, 24, 24, 24, 24, 23, 23, 23, 23,
	23, 23,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 3, 2, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 4, 3, 4, 1, 1,
	1, 1, 3, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 2, 3, 3, 1,
	1, 1, 1, 1, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 2, 2,
	2, 3, 4, 4, 4, 4, 3, 7, 3, 7,
	6, 10, 3, 4, 1, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 2, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
	2, 2, 2, 2, 2, 2, 3, 3, 3, 3,
	4, 4,
}
var yyChk = [...]int{

	-1000, -1, -9, -7, -14, -6, -11, -2, -4, 12,
	-8, -15, -10, -16, 51, 53, -17, 10, -19, 6,
	7, 8, 83, 46, 48, 49, 47, 50, -29, 58,
	59, 60, 66, 64, 70, 71, 61, 72, 73, 74,
	75, 76, 68, 77, 78, 79, 80, 81, 60, 66,
	64, 70, 71, 61, 72, 73, 74, 68, 76, 75,
	77, 78, 81, 80, 79, -7, -9, -6, -15, -18,
	-16, -12, 82, 83, 85, 86, 87, 88, 62, 63,
	64, 65, 66, 67, -12, 82, 83, 85, 86, 87,
	88, 12, 12, 11, -20, 12, 83, 84, -21, -22,
	-23, -24, 5, 6, 7, 16, 17, 15, 8, 19,
	18, 20, 21, 22, 23, 24, 25, 26, 27, 28,
	29, 30, 31, 33, 32, 34, 35, 37, 38, 39,
	40, 9, 42, 43, 41, 44, 45, 6, 7, 8,
	12, 12, 12, 12, 12, 12, -13, -6, -11, -2,
	-3, -4, 55, 56, 57, 12, 52, -7, 12, -7,
	-7, -7, -7, -7, -7, -7, -7, -7, -7, -7,
	-7, -7, -7, -7, -7, -6, 12, -6, -6, -6,
	-6, -6, -6, -6, -6, -6, -6, -6, -6, -6,
	-6, -6, -6, 13, 13, 59, 13, 13, 13, 13,
	-15, -21, 12, -15, -15, -15, -15, -15, -15, -16,
	12, -16, -16, -16, -16, -16, -16, -20, -5, -25,
	-22, -23, -24, 11, 82, 83, 85, 86, 87, 62,
	63, 64, 65, 66, 67, 69, 68, 88, 60, 61,
	-20, -20, -20, 4, 4, 4, 4, 42, 43, 27,
	34, 36, 27, 29, 33, 30, 31, 13, -20, -20,
	-20, -20, -28, -27, 4, 12, 12, 12, -6, -16,
	12, -9, 12, -19, 12, -9, 13, 13, 14, -20,
	-20, -20, -20, -20, -20, -20, -20, -20, -20, -20,
	-20, -20, -20, -20, -20, 13, 54, 54, 54, 54,
	4, 4, 13, 13, 13, 13, 13, 14, 62, 13,
	13, -25, 13, 59, -25, 54, 54, -27, -21, 51,
	51, 14, 12, 12, -26, 7, 6, -5, -5, 14,
	13, 13, 13, 7, 6, 51, 12, -5, 13,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 26, 27, 28, 29, 0,
	24, 0, 65, 0, 0, 0, 84, 0, 94, 95,
	96, 97, 0, 0, 0, 0, 0, 0, 5, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 26, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 70,
	71, 72, 73, 74, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 66, 0, 0, 0, 0, 135, 136,
	137, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 155, 156,
	157, 158, 159, 160, 161, 162, 163, 164, 165, 166,
	167, 0, 0, 0, 0, 0, 0, 98, 99, 100,
	0, 0, 0, 0, 0, 0, 4, 30, 31, 32,
	33, 34, 0, 0, 0, 0, 0, 7, 0, 8,
	9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
	19, 20, 21, 22, 23, 48, 0, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 6, 25, 0, 47, 77, 85, 87,
	75, 76, 0, 78, 79, 80, 81, 82, 83, 68,
	0, 88, 89, 90, 91, 92, 93, 0, 0, 41,
	38, 39, 40, 67, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 133, 134, 0, 0, 0, 0, 0, 0, 168,
	169, 170, 171, 172, 173, 174, 175, 101, 0, 0,
	0, 0, 0, 114, 0, 0, 0, 0, 0, 0,
	0, 0, 0, -2, 0, 0, 35, 37, 0, 117,
	118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
	128, 129, 130, 131, 132, 116, 176, 177, 178, 179,
	0, 0, 102, 103, 104, 105, 113, 0, 0, 106,
	108, 0, 36, 0, 42, 180, 181, 115, 112, 0,
	0, 0, 0, 0, 0, 43, 44, 0, 0, 0,
	110, 107, 109, 45, 46, 0, 0, 0, 111,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:118
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipeline)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:119
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipelineExpression)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:120
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].scalarPipelineExpressionFilter)
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:121
		{
			yylex.(*lexer).expr = newRootExprWithMetrics(yyDollar[1].spansetPipeline, yyDollar[3].metricsAggregation)
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:122
		{
			yylex.(*lexer).expr.withHints(yyDollar[2].hints)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:129
		{
			yyVAL.spansetPipelineExpression = yyDollar[2].spansetPipelineExpression
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:130
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetAnd, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:131
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:132
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetParent, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:133
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:134
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetAncestor, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:135
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnion, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:136
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:137
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:138
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotParent, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:139
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:140
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotAncestor, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:141
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetNotSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:142
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnionChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:143
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnionParent, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:144
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnionDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:145
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnionAncestor, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:146
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(OpSpansetUnionSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:147
		{
			yyVAL.spansetPipelineExpression = yyDollar[1].wrappedSpansetPipeline
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:151
		{
			yyVAL.wrappedSpansetPipeline = yyDollar[2].spansetPipeline
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:154
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].spansetExpression)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:155
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:156
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:157
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].selectOperation)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:158
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].spansetExpression)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:159
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:160
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:161
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:162
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].selectOperation)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:166
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:170
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:174
		{
			yyVAL.selectOperation = newSelectOperation(yyDollar[3].attributeList)
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:178
		{
			yyVAL.attribute = yyDollar[1].intrinsicField
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:179
		{
			yyVAL.attribute = yyDollar[1].attributeField
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:180
		{
			yyVAL.attribute = yyDollar[1].scopedIntrinsicField
		}
	case 41:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:184
		{
			yyVAL.attributeList = []Attribute{yyDollar[1].attribute}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:185
		{
			yyVAL.attributeList = append(yyDollar[1].attributeList, yyDollar[3].attribute)
		}
	case 43:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:190
		{
			yyVAL.numericList = []float64{yyDollar[1].staticFloat}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:191
		{
			yyVAL.numericList = []float64{float64(yyDollar[1].staticInt)}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:192
		{
			yyVAL.numericList = append(yyDollar[1].numericList, yyDollar[3].staticFloat)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:193
		{
			yyVAL.numericList = append(yyDollar[1].numericList, float64(yyDollar[3].staticInt))
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:197
		{
			yyVAL.spansetExpression = yyDollar[2].spansetExpression
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:198
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetAnd, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:199
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:200
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetParent, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:201
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:202
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetAncestor, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:203
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnion, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:204
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:206
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:207
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotParent, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:208
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:209
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotAncestor, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:210
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetNotDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:212
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnionChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:213
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnionParent, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:214
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnionSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:215
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnionAncestor, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:216
		{
			yyVAL.spansetExpression = newSpansetOperation(OpSpansetUnionDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:218
		{
			yyVAL.spansetExpression = yyDollar[1].spansetFilter
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:222
		{
			yyVAL.spansetFilter = newSpansetFilter(NewStaticBool(true))
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:223
		{
			yyVAL.spansetFilter = newSpansetFilter(yyDollar[2].fieldExpression)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:227
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:231
		{
			yyVAL.scalarFilterOperation = OpEqual
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:232
		{
			yyVAL.scalarFilterOperation = OpNotEqual
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:233
		{
			yyVAL.scalarFilterOperation = OpLess
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:234
		{
			yyVAL.scalarFilterOperation = OpLessEqual
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:235
		{
			yyVAL.scalarFilterOperation = OpGreater
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:236
		{
			yyVAL.scalarFilterOperation = OpGreaterEqual
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:243
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:244
		{
			yyVAL.scalarPipelineExpressionFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpression, yyDollar[3].static)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:248
		{
			yyVAL.scalarPipelineExpression = yyDollar[2].scalarPipelineExpression
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:249
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpAdd, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:250
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpSub, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:251
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMult, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:252
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpDiv, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:253
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpMod, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:254
		{
			yyVAL.scalarPipelineExpression = newScalarOperation(OpPower, yyDollar[1].scalarPipelineExpression, yyDollar[3].scalarPipelineExpression)
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:255
		{
			yyVAL.scalarPipelineExpression = yyDollar[1].wrappedScalarPipeline
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:259
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:263
		{
			yyVAL.scalarPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].aggregate)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:267
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:268
		{
			yyVAL.scalarExpression = newScalarOperation(OpAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:269
		{
			yyVAL.scalarExpression = newScalarOperation(OpSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:270
		{
			yyVAL.scalarExpression = newScalarOperation(OpMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:271
		{
			yyVAL.scalarExpression = newScalarOperation(OpDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:272
		{
			yyVAL.scalarExpression = newScalarOperation(OpMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:273
		{
			yyVAL.scalarExpression = newScalarOperation(OpPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:274
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:275
		{
			yyVAL.scalarExpression = NewStaticInt(yyDollar[1].staticInt)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:276
		{
			yyVAL.scalarExpression = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:277
		{
			yyVAL.scalarExpression = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:278
		{
			yyVAL.scalarExpression = NewStaticInt(-yyDollar[2].staticInt)
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:279
		{
			yyVAL.scalarExpression = NewStaticFloat(-yyDollar[2].staticFloat)
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:280
		{
			yyVAL.scalarExpression = NewStaticDuration(-yyDollar[2].staticDuration)
		}
	case 101:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:284
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:285
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 103:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:286
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 104:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:287
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 105:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:288
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:295
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateRate, nil)
		}
	case 107:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/traceql/expr.y:296
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateRate, yyDollar[6].attributeList)
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:297
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateCountOverTime, nil)
		}
	case 109:
		yyDollar = yyS[yypt-7 : yypt+1]
//line pkg/traceql/expr.y:298
		{
			yyVAL.metricsAggregation = newMetricsAggregate(metricsAggregateCountOverTime, yyDollar[6].attributeList)
		}
	case 110:
		yyDollar = yyS[yypt-6 : yypt+1]
//line pkg/traceql/expr.y:299
		{
			yyVAL.metricsAggregation = newMetricsAggregateQuantileOverTime(yyDollar[3].attribute, yyDollar[5].numericList, nil)
		}
	case 111:
		yyDollar = yyS[yypt-10 : yypt+1]
//line pkg/traceql/expr.y:300
		{
			yyVAL.metricsAggregation = newMetricsAggregateQuantileOverTime(yyDollar[3].attribute, yyDollar[5].numericList, yyDollar[9].attributeList)
		}
	case 112:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:307
		{
			yyVAL.hint = newHint(yyDollar[1].staticStr, yyDollar[3].static)
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:311
		{
			yyVAL.hints = newHints(yyDollar[3].hintList)
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:315
		{
			yyVAL.hintList = []*Hint{yyDollar[1].hint}
		}
	case 115:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:316
		{
			yyVAL.hintList = append(yyDollar[1].hintList, yyDollar[3].hint)
		}
	case 116:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:324
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:325
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:326
		{
			yyVAL.fieldExpression = newBinaryOperation(OpSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 119:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:327
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 120:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:328
		{
			yyVAL.fieldExpression = newBinaryOperation(OpDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 121:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:329
		{
			yyVAL.fieldExpression = newBinaryOperation(OpMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 122:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:330
		{
			yyVAL.fieldExpression = newBinaryOperation(OpEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:331
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 124:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:332
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 125:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:333
		{
			yyVAL.fieldExpression = newBinaryOperation(OpLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 126:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:334
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 127:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:335
		{
			yyVAL.fieldExpression = newBinaryOperation(OpGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 128:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:336
		{
			yyVAL.fieldExpression = newBinaryOperation(OpRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:337
		{
			yyVAL.fieldExpression = newBinaryOperation(OpNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:338
		{
			yyVAL.fieldExpression = newBinaryOperation(OpPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:339
		{
			yyVAL.fieldExpression = newBinaryOperation(OpAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:340
		{
			yyVAL.fieldExpression = newBinaryOperation(OpOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:341
		{
			yyVAL.fieldExpression = newUnaryOperation(OpSub, yyDollar[2].fieldExpression)
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:342
		{
			yyVAL.fieldExpression = newUnaryOperation(OpNot, yyDollar[2].fieldExpression)
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:343
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:344
		{
			yyVAL.fieldExpression = yyDollar[1].intrinsicField
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:345
		{
			yyVAL.fieldExpression = yyDollar[1].attributeField
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:346
		{
			yyVAL.fieldExpression = yyDollar[1].scopedIntrinsicField
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:353
		{
			yyVAL.static = NewStaticString(yyDollar[1].staticStr)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:354
		{
			yyVAL.static = NewStaticInt(yyDollar[1].staticInt)
		}
	case 141:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:355
		{
			yyVAL.static = NewStaticFloat(yyDollar[1].staticFloat)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:356
		{
			yyVAL.static = NewStaticBool(true)
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:357
		{
			yyVAL.static = NewStaticBool(false)
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:358
		{
			yyVAL.static = NewStaticNil()
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:359
		{
			yyVAL.static = NewStaticDuration(yyDollar[1].staticDuration)
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:360
		{
			yyVAL.static = NewStaticStatus(StatusOk)
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:361
		{
			yyVAL.static = NewStaticStatus(StatusError)
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:362
		{
			yyVAL.static = NewStaticStatus(StatusUnset)
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:363
		{
			yyVAL.static = NewStaticKind(KindUnspecified)
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:364
		{
			yyVAL.static = NewStaticKind(KindInternal)
		}
	case 151:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:365
		{
			yyVAL.static = NewStaticKind(KindServer)
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:366
		{
			yyVAL.static = NewStaticKind(KindClient)
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:367
		{
			yyVAL.static = NewStaticKind(KindProducer)
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:368
		{
			yyVAL.static = NewStaticKind(KindConsumer)
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:374
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicDuration)
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:375
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicChildCount)
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:376
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicName)
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:377
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicStatus)
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:378
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicStatusMessage)
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:379
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicKind)
		}
	case 161:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:380
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicParent)
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:381
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceRootSpan)
		}
	case 163:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:382
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceRootService)
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:383
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicTraceDuration)
		}
	case 165:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:384
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicNestedSetLeft)
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:385
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicNestedSetRight)
		}
	case 167:
		yyDollar = yyS[yypt-1 : yypt+1]
//line pkg/traceql/expr.y:386
		{
			yyVAL.intrinsicField = NewIntrinsic(IntrinsicNestedSetParent)
		}
	case 168:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:391
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicTraceDuration)
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:392
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicTraceRootSpan)
		}
	case 170:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:393
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicTraceRootService)
		}
	case 171:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:395
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicDuration)
		}
	case 172:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:396
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicName)
		}
	case 173:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:397
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicKind)
		}
	case 174:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:398
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicStatus)
		}
	case 175:
		yyDollar = yyS[yypt-2 : yypt+1]
//line pkg/traceql/expr.y:399
		{
			yyVAL.scopedIntrinsicField = NewIntrinsic(IntrinsicStatusMessage)
		}
	case 176:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:402
		{
			yyVAL.attributeField = NewAttribute(yyDollar[2].staticStr)
		}
	case 177:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:403
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, false, yyDollar[2].staticStr)
		}
	case 178:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:404
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeSpan, false, yyDollar[2].staticStr)
		}
	case 179:
		yyDollar = yyS[yypt-3 : yypt+1]
//line pkg/traceql/expr.y:405
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeNone, true, yyDollar[2].staticStr)
		}
	case 180:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:406
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeResource, true, yyDollar[3].staticStr)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line pkg/traceql/expr.y:407
		{
			yyVAL.attributeField = NewScopedAttribute(AttributeScopeSpan, true, yyDollar[3].staticStr)
		}
	}
	goto yystack /* stack new state and value */
}
