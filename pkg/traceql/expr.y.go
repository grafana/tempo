// Code generated by goyacc -o expr.y.go expr.y. DO NOT EDIT.

//line expr.y:2
package traceql

import __yyfmt__ "fmt"

//line expr.y:2

import (
	"time"
)

//line expr.y:11
type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation

	spansetExpression      SpansetExpression
	wrappedSpansetPipeline Pipeline
	spansetPipeline        Pipeline
	spansetFilter          SpansetFilter
	scalarFilter           ScalarFilter

	scalarExpression      ScalarExpression
	wrappedScalarPipeline Pipeline
	scalarPipeline        Pipeline
	aggregate             Aggregate

	fieldExpression FieldExpression
	static          Static
	spanField       Static

	binOp          int
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const DURATION = 57350
const COMMA = 57351
const DOT = 57352
const OPEN_BRACE = 57353
const CLOSE_BRACE = 57354
const OPEN_BRACKET = 57355
const CLOSE_BRACKET = 57356
const OPEN_PARENS = 57357
const CLOSE_PARENS = 57358
const NIL = 57359
const TRUE = 57360
const FALSE = 57361
const COUNT = 57362
const AVG = 57363
const MAX = 57364
const MIN = 57365
const SUM = 57366
const BY = 57367
const COALESCE = 57368
const PIPE = 57369
const EQ = 57370
const NEQ = 57371
const LT = 57372
const LTE = 57373
const GT = 57374
const GTE = 57375
const NRE = 57376
const RE = 57377
const DESC = 57378
const AND = 57379
const OR = 57380
const NOT = 57381
const ADD = 57382
const SUB = 57383
const MUL = 57384
const DIV = 57385
const MOD = 57386
const POW = 57387

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"COMMA",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_BRACKET",
	"CLOSE_BRACKET",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"NIL",
	"TRUE",
	"FALSE",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"PIPE",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"AND",
	"OR",
	"NOT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 416

var yyAct = [...]int{

	49, 3, 90, 91, 92, 93, 94, 103, 31, 73,
	92, 93, 94, 103, 103, 4, 5, 43, 44, 45,
	46, 35, 36, 37, 38, 39, 40, 46, 28, 62,
	66, 68, 69, 41, 42, 43, 44, 45, 46, 53,
	14, 72, 2, 61, 63, 71, 14, 27, 88, 32,
	70, 106, 107, 108, 71, 142, 27, 110, 111, 112,
	113, 114, 74, 115, 60, 72, 29, 14, 29, 31,
	30, 28, 30, 28, 62, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 59, 61, 63,
	58, 120, 121, 122, 123, 124, 125, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 14, 9, 141,
	116, 57, 14, 11, 56, 33, 14, 67, 47, 118,
	109, 95, 96, 97, 98, 99, 100, 102, 101, 137,
	104, 105, 54, 90, 91, 92, 93, 94, 103, 13,
	89, 34, 12, 8, 75, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 95, 96, 97, 98,
	99, 100, 102, 101, 7, 104, 105, 64, 90, 91,
	92, 93, 94, 103, 140, 41, 42, 43, 44, 45,
	46, 117, 1, 0, 0, 33, 95, 96, 97, 98,
	99, 100, 102, 101, 139, 104, 105, 0, 90, 91,
	92, 93, 94, 103, 0, 0, 95, 96, 97, 98,
	99, 100, 102, 101, 138, 104, 105, 0, 90, 91,
	92, 93, 94, 103, 0, 0, 95, 96, 97, 98,
	99, 100, 102, 101, 136, 104, 105, 0, 90, 91,
	92, 93, 94, 103, 0, 0, 95, 96, 97, 98,
	99, 100, 102, 101, 119, 104, 105, 0, 90, 91,
	92, 93, 94, 103, 0, 0, 95, 96, 97, 98,
	99, 100, 102, 101, 0, 104, 105, 0, 90, 91,
	92, 93, 94, 103, 35, 36, 37, 38, 39, 40,
	0, 0, 0, 0, 0, 0, 41, 42, 43, 44,
	45, 46, 104, 105, 0, 90, 91, 92, 93, 94,
	103, 55, 20, 21, 22, 26, 0, 0, 0, 48,
	0, 0, 50, 0, 25, 23, 24, 55, 20, 21,
	22, 26, 0, 0, 0, 0, 0, 0, 50, 0,
	25, 23, 24, 0, 0, 0, 52, 0, 51, 0,
	0, 0, 0, 20, 21, 22, 26, 0, 0, 11,
	0, 0, 52, 6, 51, 25, 23, 24, 15, 18,
	16, 17, 19, 10, 65, 20, 21, 22, 26, 0,
	0, 11, 0, 0, 0, 6, 0, 25, 23, 24,
	15, 18, 16, 17, 19, 10, 20, 21, 22, 26,
	0, 0, 0, 0, 0, 0, 76, 0, 25, 23,
	24, 15, 18, 16, 17, 19,
}
var yyPact = [...]int{

	370, -1000, 20, 36, -1000, -1000, 370, -1000, -1000, 256,
	103, 307, -1000, -1000, -1000, 99, 96, 75, 72, 49,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 348, 102, 102,
	102, 34, 38, -7, 46, 391, 391, 391, 391, 391,
	391, 391, 391, 391, 391, 391, 391, 323, -1000, 128,
	323, 323, 323, -1000, 110, -1000, 41, 323, 323, 323,
	323, -1000, 36, -1000, -1000, 48, -1000, 370, -9, -9,
	-1000, -1000, 348, -1000, -1000, 135, 370, 135, 135, 135,
	135, 135, -25, -25, -18, -18, -18, -18, 238, -1000,
	323, 323, 323, 323, 323, 323, 323, 323, 323, 323,
	323, 323, 323, 323, 323, 323, 218, -32, -38, 125,
	-1000, 198, 178, 158, 93, 39, 29, 256, 14, -1000,
	-32, -32, -31, -31, -31, 265, 265, 265, 265, 265,
	265, 265, 265, -31, -38, -38, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 182, 16, 167, 1, 164, 42, 143, 15, 108,
	142, 141, 139, 0, 39, 132,
}
var yyR1 = [...]int{

	0, 1, 2, 3, 4, 4, 4, 4, 4, 4,
	5, 6, 6, 6, 6, 6, 6, 6, 7, 7,
	8, 8, 8, 8, 8, 8, 9, 9, 9, 9,
	9, 9, 9, 9, 9, 9, 10, 11, 12, 12,
	12, 12, 12, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 13, 13, 13, 14, 14, 14, 14, 14, 14,
	14, 15, 15,
}
var yyR2 = [...]int{

	0, 1, 4, 3, 3, 3, 3, 3, 1, 1,
	3, 1, 1, 1, 3, 3, 3, 3, 2, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 1, 1, 3, 3, 3, 4,
	4, 4, 4, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	2, 2, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3,
}
var yyChk = [...]int{

	-1000, -1, -6, -4, -8, -2, 15, -5, -7, -9,
	25, 11, -10, -12, -14, 20, 22, 23, 21, 24,
	5, 6, 7, 18, 19, 17, 8, 27, 37, 32,
	36, -4, -6, -9, -11, 28, 29, 30, 31, 32,
	33, 40, 41, 42, 43, 44, 45, 15, 12, -13,
	15, 41, 39, -14, -15, 4, 15, 15, 15, 15,
	15, -8, -4, -2, -3, 26, -4, 15, -4, -4,
	16, 16, 27, 16, 16, -9, 15, -9, -9, -9,
	-9, -9, -9, -9, -9, -9, -9, -9, -13, 12,
	40, 41, 42, 43, 44, 28, 29, 30, 31, 32,
	33, 35, 34, 45, 37, 38, -13, -13, -13, 10,
	16, -13, -13, -13, -13, 15, -6, -9, -6, 16,
	-13, -13, -13, -13, -13, -13, -13, -13, -13, -13,
	-13, -13, -13, -13, -13, -13, 16, 4, 16, 16,
	16, 16, 16,
}
var yyDef = [...]int{

	0, -2, 1, 11, 12, 13, 0, 8, 9, 0,
	0, 0, 33, 34, 35, 0, 0, 0, 0, 0,
	64, 65, 66, 67, 68, 69, 70, 0, 0, 0,
	0, 11, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 18, 0,
	0, 0, 0, 62, 63, 71, 0, 0, 0, 0,
	0, 14, 15, 16, 17, 0, 5, 0, 6, 7,
	4, 10, 0, 26, 36, 20, 0, 21, 22, 23,
	24, 25, 27, 28, 29, 30, 31, 32, 0, 19,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 60, 61, 0,
	38, 0, 0, 0, 0, 0, 0, 37, 0, 2,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 43, 72, 39, 40,
	41, 42, 3,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:79
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipeline)
		}
	case 2:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:83
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 3:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:87
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:94
		{
			yyVAL.spansetExpression = yyDollar[2].spansetExpression
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:95
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetAnd, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:96
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:97
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:98
		{
			yyVAL.spansetExpression = yyDollar[1].wrappedSpansetPipeline
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:99
		{
			yyVAL.spansetExpression = yyDollar[1].spansetFilter
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:103
		{
			yyVAL.wrappedSpansetPipeline = yyDollar[2].spansetPipeline
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:106
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].spansetExpression)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:107
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:108
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:109
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:110
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].spansetExpression)
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:111
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:112
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 18:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:116
		{
			yyVAL.spansetFilter = newSpansetFilter(newStaticBool(true))
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:117
		{
			yyVAL.spansetFilter = newSpansetFilter(yyDollar[2].fieldExpression)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:121
		{
			yyVAL.scalarFilter = newScalarFilter(opEqual, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:122
		{
			yyVAL.scalarFilter = newScalarFilter(opNotEqual, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:123
		{
			yyVAL.scalarFilter = newScalarFilter(opLess, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:124
		{
			yyVAL.scalarFilter = newScalarFilter(opLessEqual, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:125
		{
			yyVAL.scalarFilter = newScalarFilter(opGreater, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:126
		{
			yyVAL.scalarFilter = newScalarFilter(opGreaterEqual, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:133
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:134
		{
			yyVAL.scalarExpression = newScalarOperation(opAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:135
		{
			yyVAL.scalarExpression = newScalarOperation(opSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:136
		{
			yyVAL.scalarExpression = newScalarOperation(opMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:137
		{
			yyVAL.scalarExpression = newScalarOperation(opDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:138
		{
			yyVAL.scalarExpression = newScalarOperation(opMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:139
		{
			yyVAL.scalarExpression = newScalarOperation(opPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:140
		{
			yyVAL.scalarExpression = yyDollar[1].wrappedScalarPipeline
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:141
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:142
		{
			yyVAL.scalarExpression = yyDollar[1].static
		}
	case 36:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:146
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 37:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:150
		{
			yyVAL.scalarPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarExpression)
		}
	case 38:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:154
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:155
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:156
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:157
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:158
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:165
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:166
		{
			yyVAL.fieldExpression = newBinaryOperation(opAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:167
		{
			yyVAL.fieldExpression = newBinaryOperation(opSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:168
		{
			yyVAL.fieldExpression = newBinaryOperation(opMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:169
		{
			yyVAL.fieldExpression = newBinaryOperation(opDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:170
		{
			yyVAL.fieldExpression = newBinaryOperation(opMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:171
		{
			yyVAL.fieldExpression = newBinaryOperation(opEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:172
		{
			yyVAL.fieldExpression = newBinaryOperation(opNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:173
		{
			yyVAL.fieldExpression = newBinaryOperation(opLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:174
		{
			yyVAL.fieldExpression = newBinaryOperation(opLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:175
		{
			yyVAL.fieldExpression = newBinaryOperation(opGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:176
		{
			yyVAL.fieldExpression = newBinaryOperation(opGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:177
		{
			yyVAL.fieldExpression = newBinaryOperation(opRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:178
		{
			yyVAL.fieldExpression = newBinaryOperation(opNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:179
		{
			yyVAL.fieldExpression = newBinaryOperation(opPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:180
		{
			yyVAL.fieldExpression = newBinaryOperation(opAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:181
		{
			yyVAL.fieldExpression = newBinaryOperation(opOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:182
		{
			yyVAL.fieldExpression = newUnaryOperation(opSub, yyDollar[2].fieldExpression)
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:183
		{
			yyVAL.fieldExpression = newUnaryOperation(opNot, yyDollar[2].fieldExpression)
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:184
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:185
		{
			yyVAL.fieldExpression = yyDollar[1].spanField
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:192
		{
			yyVAL.static = newStaticString(yyDollar[1].staticStr)
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:193
		{
			yyVAL.static = newStaticInt(yyDollar[1].staticInt)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:194
		{
			yyVAL.static = newStaticFloat(yyDollar[1].staticFloat)
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:195
		{
			yyVAL.static = newStaticBool(true)
		}
	case 68:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:196
		{
			yyVAL.static = newStaticBool(false)
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:197
		{
			yyVAL.static = newStaticNil()
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:198
		{
			yyVAL.static = newStaticDuration(yyDollar[1].staticDuration)
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:202
		{
			yyVAL.spanField = newStaticIdentifier(yyDollar[1].staticStr)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:203
		{
			yyVAL.spanField = newNamespacedIdentifier(yyDollar[1].spanField, yyDollar[3].staticStr)
		}
	}
	goto yystack /* stack new state and value */
}
