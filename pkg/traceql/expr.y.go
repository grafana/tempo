// Code generated by goyacc -o expr.y.go expr.y. DO NOT EDIT.

//line expr.y:2
package traceql

import __yyfmt__ "fmt"

//line expr.y:2

import (
	"time"
)

//line expr.y:11
type yySymType struct {
	yys               int
	root              RootExpr
	groupOperation    GroupOperation
	coalesceOperation CoalesceOperation

	spansetExpression         SpansetExpression
	spansetPipelineExpression SpansetExpression
	wrappedSpansetPipeline    Pipeline
	spansetPipeline           Pipeline
	spansetFilter             SpansetFilter
	scalarFilter              ScalarFilter
	scalarFilterOperation     int

	scalarPipelineExpresssion ScalarExpression
	scalarExpression          ScalarExpression
	wrappedScalarPipeline     Pipeline
	scalarPipeline            Pipeline
	aggregate                 Aggregate

	fieldExpression FieldExpression
	static          Static
	intrinsicField  Static
	attributeField  Attribute

	binOp          int
	staticInt      int
	staticStr      string
	staticFloat    float64
	staticDuration time.Duration
}

const IDENTIFIER = 57346
const STRING = 57347
const INTEGER = 57348
const FLOAT = 57349
const DURATION = 57350
const DOT = 57351
const OPEN_BRACE = 57352
const CLOSE_BRACE = 57353
const OPEN_PARENS = 57354
const CLOSE_PARENS = 57355
const NIL = 57356
const TRUE = 57357
const FALSE = 57358
const STATUS_ERROR = 57359
const STATUS_OK = 57360
const STATUS_UNSET = 57361
const START = 57362
const END = 57363
const IDURATION = 57364
const CHILDCOUNT = 57365
const NAME = 57366
const STATUS = 57367
const PARENT = 57368
const RESOURCE = 57369
const SPAN = 57370
const COUNT = 57371
const AVG = 57372
const MAX = 57373
const MIN = 57374
const SUM = 57375
const BY = 57376
const COALESCE = 57377
const PIPE = 57378
const EQ = 57379
const NEQ = 57380
const LT = 57381
const LTE = 57382
const GT = 57383
const GTE = 57384
const NRE = 57385
const RE = 57386
const DESC = 57387
const TILDE = 57388
const AND = 57389
const OR = 57390
const NOT = 57391
const ADD = 57392
const SUB = 57393
const MUL = 57394
const DIV = 57395
const MOD = 57396
const POW = 57397

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENTIFIER",
	"STRING",
	"INTEGER",
	"FLOAT",
	"DURATION",
	"DOT",
	"OPEN_BRACE",
	"CLOSE_BRACE",
	"OPEN_PARENS",
	"CLOSE_PARENS",
	"NIL",
	"TRUE",
	"FALSE",
	"STATUS_ERROR",
	"STATUS_OK",
	"STATUS_UNSET",
	"START",
	"END",
	"IDURATION",
	"CHILDCOUNT",
	"NAME",
	"STATUS",
	"PARENT",
	"RESOURCE",
	"SPAN",
	"COUNT",
	"AVG",
	"MAX",
	"MIN",
	"SUM",
	"BY",
	"COALESCE",
	"PIPE",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"NRE",
	"RE",
	"DESC",
	"TILDE",
	"AND",
	"OR",
	"NOT",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"MOD",
	"POW",
}
var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 609

var yyAct = [...]int{

	71, 38, 155, 6, 7, 68, 59, 4, 44, 171,
	2, 51, 54, 123, 62, 69, 156, 157, 57, 142,
	143, 144, 145, 146, 155, 33, 36, 32, 127, 142,
	143, 144, 145, 146, 155, 12, 93, 95, 203, 97,
	166, 122, 127, 126, 61, 106, 109, 110, 111, 112,
	113, 114, 45, 46, 47, 48, 49, 50, 144, 145,
	146, 155, 122, 62, 32, 63, 64, 65, 66, 67,
	68, 140, 165, 158, 159, 160, 138, 75, 13, 63,
	64, 65, 66, 67, 68, 123, 13, 15, 172, 116,
	167, 168, 169, 170, 65, 66, 67, 68, 128, 131,
	132, 133, 134, 135, 136, 137, 108, 101, 97, 5,
	13, 173, 41, 42, 43, 44, 107, 92, 58, 39,
	40, 41, 42, 43, 44, 91, 90, 93, 95, 89,
	97, 52, 88, 70, 61, 53, 55, 51, 54, 198,
	129, 164, 94, 178, 179, 180, 181, 182, 183, 184,
	185, 186, 187, 188, 189, 190, 191, 192, 193, 175,
	162, 115, 117, 118, 119, 120, 176, 45, 46, 47,
	48, 49, 50, 161, 197, 61, 13, 62, 77, 13,
	63, 64, 65, 66, 67, 68, 13, 124, 196, 45,
	46, 47, 48, 49, 50, 63, 64, 65, 66, 67,
	68, 13, 39, 40, 41, 42, 43, 44, 58, 45,
	46, 47, 48, 49, 50, 52, 195, 13, 163, 53,
	55, 51, 54, 76, 121, 16, 174, 17, 18, 19,
	23, 85, 60, 94, 72, 10, 22, 20, 21, 25,
	24, 26, 78, 79, 80, 81, 82, 83, 84, 86,
	87, 202, 34, 11, 9, 96, 35, 37, 33, 36,
	34, 1, 0, 0, 35, 37, 33, 36, 0, 0,
	201, 74, 0, 73, 0, 147, 148, 149, 150, 151,
	152, 154, 153, 0, 0, 156, 157, 0, 142, 143,
	144, 145, 146, 155, 147, 148, 149, 150, 151, 152,
	154, 153, 200, 0, 156, 157, 0, 142, 143, 144,
	145, 146, 155, 0, 0, 0, 0, 0, 0, 0,
	0, 199, 0, 0, 0, 0, 147, 148, 149, 150,
	151, 152, 154, 153, 0, 0, 156, 157, 0, 142,
	143, 144, 145, 146, 155, 147, 148, 149, 150, 151,
	152, 154, 153, 194, 0, 156, 157, 0, 142, 143,
	144, 145, 146, 155, 0, 0, 0, 0, 0, 0,
	0, 0, 177, 0, 0, 0, 0, 147, 148, 149,
	150, 151, 152, 154, 153, 0, 0, 156, 157, 141,
	142, 143, 144, 145, 146, 155, 147, 148, 149, 150,
	151, 152, 154, 153, 56, 3, 156, 157, 0, 142,
	143, 144, 145, 146, 155, 147, 148, 149, 150, 151,
	152, 154, 153, 125, 0, 156, 157, 0, 142, 143,
	144, 145, 146, 155, 0, 0, 130, 0, 100, 102,
	103, 104, 105, 0, 0, 0, 0, 45, 46, 47,
	48, 49, 50, 27, 30, 28, 29, 31, 0, 0,
	39, 40, 41, 42, 43, 44, 17, 18, 19, 23,
	0, 15, 0, 98, 0, 22, 20, 21, 25, 24,
	26, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 30, 28, 29, 31, 14, 99, 17, 18, 19,
	23, 0, 15, 0, 98, 0, 22, 20, 21, 25,
	24, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 30, 28, 29, 31, 14, 17, 18, 19,
	23, 0, 15, 0, 8, 0, 22, 20, 21, 25,
	24, 26, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 30, 28, 29, 31, 14, 17, 18, 19,
	23, 0, 0, 0, 130, 0, 22, 20, 21, 25,
	24, 26, 139, 0, 0, 0, 0, 0, 0, 0,
	0, 27, 30, 28, 29, 31, 0, 0, 0, 27,
	30, 28, 29, 31, 17, 18, 19, 23, 0, 0,
	0, 108, 0, 22, 20, 21, 25, 24, 26,
}
var yyPact = [...]int{

	522, -1000, -9, 219, 152, 90, -1000, -1000, 522, -1000,
	-1000, -1000, 130, 172, 121, 222, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 120, 117, 114,
	113, 105, 461, 95, 95, 95, 95, 95, 589, 94,
	94, 94, 94, 94, 94, -1000, -1000, -1000, -1000, -1000,
	-1000, 77, 77, 77, 77, 77, 211, 49, 174, 410,
	30, 15, 552, 424, 424, 424, 424, 424, 424, 560,
	222, 378, 222, 222, 222, -1000, -1000, 164, -1000, -1000,
	-1000, -1000, -1000, -1000, 151, 214, 132, 63, 27, 222,
	222, 222, 222, -1000, 90, -1000, -1000, 152, 492, 76,
	-1000, 522, -22, -22, -1000, -22, 69, -1000, 492, 60,
	60, -47, -47, -47, -47, -1000, 77, -36, -36, -1000,
	-36, -1000, -1000, 461, -1000, -1000, -1000, -1000, 145, -1000,
	424, 42, 42, -50, -50, -50, -50, 145, 69, 492,
	359, -1000, 222, 222, 222, 222, 222, 222, 222, 222,
	222, 222, 222, 222, 222, 222, 222, 222, 340, 6,
	-21, 212, 184, -1000, 170, 135, -1000, 308, 289, 257,
	238, -23, 25, 28, 174, 130, 29, -1000, 6, 6,
	-53, -53, -53, -31, -31, -31, -31, -31, -31, -31,
	-31, -53, -21, -21, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000,
}
var yyPgo = [...]int{

	0, 261, 4, 255, 109, 404, 254, 9, 253, 3,
	1, 6, 35, 235, 232, 225, 0, 77, 223, 178,
}
var yyR1 = [...]int{

	0, 1, 1, 1, 2, 3, 5, 5, 5, 5,
	5, 5, 5, 6, 7, 7, 7, 7, 7, 7,
	7, 4, 4, 4, 4, 4, 4, 4, 8, 9,
	9, 9, 9, 9, 9, 10, 10, 10, 10, 10,
	10, 11, 11, 11, 11, 11, 11, 11, 11, 13,
	14, 12, 12, 12, 12, 12, 12, 12, 12, 15,
	15, 15, 15, 15, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 17, 17, 17, 17,
	17, 17, 17, 17, 17, 17, 18, 18, 18, 18,
	18, 18, 18, 19, 19, 19, 19, 19,
}
var yyR2 = [...]int{

	0, 1, 1, 1, 4, 3, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 1, 1, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 1, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 1, 3,
	4, 4, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 2, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 3, 3,
}
var yyChk = [...]int{

	-1000, -1, -7, -5, -11, -4, -9, -2, 12, -6,
	-13, -8, -12, -17, 34, 10, -15, 5, 6, 7,
	15, 16, 14, 8, 18, 17, 19, 29, 31, 32,
	30, 33, 36, 47, 41, 45, 48, 46, -10, 50,
	51, 52, 53, 54, 55, 37, 38, 39, 40, 41,
	42, 47, 41, 45, 48, 46, -5, -7, -4, -11,
	-14, -12, -10, 50, 51, 52, 53, 54, 55, -10,
	12, -16, 12, 51, 49, -17, -18, -19, 20, 21,
	22, 23, 24, 25, 26, 9, 27, 28, 12, 12,
	12, 12, 12, -9, -4, -2, -3, -11, 12, 35,
	-5, 12, -5, -5, -5, -5, -11, -17, 12, -11,
	-11, -11, -11, -11, -11, -4, 12, -4, -4, -4,
	-4, 13, 13, 36, 13, 13, 13, 13, -12, -17,
	12, -12, -12, -12, -12, -12, -12, -12, -11, 12,
	-16, 11, 50, 51, 52, 53, 54, 37, 38, 39,
	40, 41, 42, 44, 43, 55, 47, 48, -16, -16,
	-16, 9, 9, 4, 9, 9, 13, -16, -16, -16,
	-16, -7, 12, -7, -4, -12, -12, 13, -16, -16,
	-16, -16, -16, -16, -16, -16, -16, -16, -16, -16,
	-16, -16, -16, -16, 13, 4, 4, 4, 4, 13,
	13, 13, 13, 13,
}
var yyDef = [...]int{

	0, -2, 1, 2, 3, 14, 15, 16, 0, 12,
	48, 27, 0, 0, 0, 0, 58, 86, 87, 88,
	89, 90, 91, 92, 93, 94, 95, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 36, 37, 38, 39,
	40, 0, 0, 0, 0, 0, 0, 0, 14, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 83, 84, 85, 96, 97,
	98, 99, 100, 101, 102, 0, 0, 0, 0, 0,
	0, 0, 0, 17, 18, 19, 20, 0, 0, 0,
	7, 0, 8, 9, 10, 11, 32, 34, 0, 42,
	43, 44, 45, 46, 47, 22, 0, 23, 24, 25,
	26, 6, 13, 0, 21, 41, 49, 51, 29, 31,
	0, 52, 53, 54, 55, 56, 57, 30, 33, 0,
	0, 28, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	82, 0, 0, 103, 0, 0, 59, 0, 0, 0,
	0, 0, 0, 0, 0, 50, 0, 4, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 64, 107, 106, 104, 105, 60,
	61, 62, 63, 5,
}
var yyTok1 = [...]int{

	1,
}
var yyTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55,
}
var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:89
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipeline)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:90
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].spansetPipelineExpression)
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:91
		{
			yylex.(*lexer).expr = newRootExpr(yyDollar[1].scalarPipelineExpresssion)
		}
	case 4:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:95
		{
			yyVAL.groupOperation = newGroupOperation(yyDollar[3].fieldExpression)
		}
	case 5:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:99
		{
			yyVAL.coalesceOperation = newCoalesceOperation()
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:106
		{
			yyVAL.spansetPipelineExpression = yyDollar[2].spansetPipelineExpression
		}
	case 7:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:107
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(opSpansetAnd, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:108
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(opSpansetChild, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:109
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(opSpansetDescendant, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:110
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(opSpansetUnion, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:111
		{
			yyVAL.spansetPipelineExpression = newSpansetOperation(opSpansetSibling, yyDollar[1].spansetPipelineExpression, yyDollar[3].spansetPipelineExpression)
		}
	case 12:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:112
		{
			yyVAL.spansetPipelineExpression = yyDollar[1].wrappedSpansetPipeline
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:116
		{
			yyVAL.wrappedSpansetPipeline = yyDollar[2].spansetPipeline
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:119
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].spansetExpression)
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:120
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].scalarFilter)
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:121
		{
			yyVAL.spansetPipeline = newPipeline(yyDollar[1].groupOperation)
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:122
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarFilter)
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:123
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].spansetExpression)
		}
	case 19:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:124
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].groupOperation)
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:125
		{
			yyVAL.spansetPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].coalesceOperation)
		}
	case 21:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:129
		{
			yyVAL.spansetExpression = yyDollar[2].spansetExpression
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:130
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetAnd, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:131
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetChild, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:132
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetDescendant, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:133
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetUnion, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:134
		{
			yyVAL.spansetExpression = newSpansetOperation(opSpansetSibling, yyDollar[1].spansetExpression, yyDollar[3].spansetExpression)
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:135
		{
			yyVAL.spansetExpression = yyDollar[1].spansetFilter
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:139
		{
			yyVAL.spansetFilter = newSpansetFilter(yyDollar[2].fieldExpression)
		}
	case 29:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:143
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:144
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].static, yyDollar[3].scalarExpression)
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:145
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarExpression, yyDollar[3].static)
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:146
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:147
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].static, yyDollar[3].scalarPipelineExpresssion)
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:148
		{
			yyVAL.scalarFilter = newScalarFilter(yyDollar[2].scalarFilterOperation, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].static)
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:152
		{
			yyVAL.scalarFilterOperation = opEqual
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:153
		{
			yyVAL.scalarFilterOperation = opNotEqual
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:154
		{
			yyVAL.scalarFilterOperation = opLess
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:155
		{
			yyVAL.scalarFilterOperation = opLessEqual
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:156
		{
			yyVAL.scalarFilterOperation = opGreater
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:157
		{
			yyVAL.scalarFilterOperation = opGreaterEqual
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:164
		{
			yyVAL.scalarPipelineExpresssion = yyDollar[2].scalarPipelineExpresssion
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:165
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opAdd, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:166
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opSub, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:167
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opMult, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:168
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opDiv, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:169
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opMod, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:170
		{
			yyVAL.scalarPipelineExpresssion = newScalarOperation(opPower, yyDollar[1].scalarPipelineExpresssion, yyDollar[3].scalarPipelineExpresssion)
		}
	case 48:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:171
		{
			yyVAL.scalarPipelineExpresssion = yyDollar[1].wrappedScalarPipeline
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:174
		{
			yyVAL.wrappedScalarPipeline = yyDollar[2].scalarPipeline
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:178
		{
			yyVAL.scalarPipeline = yyDollar[1].spansetPipeline.addItem(yyDollar[3].scalarExpression)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:182
		{
			yyVAL.scalarExpression = yyDollar[2].scalarExpression
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:183
		{
			yyVAL.scalarExpression = newScalarOperation(opAdd, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:184
		{
			yyVAL.scalarExpression = newScalarOperation(opSub, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:185
		{
			yyVAL.scalarExpression = newScalarOperation(opMult, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:186
		{
			yyVAL.scalarExpression = newScalarOperation(opDiv, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:187
		{
			yyVAL.scalarExpression = newScalarOperation(opMod, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:188
		{
			yyVAL.scalarExpression = newScalarOperation(opPower, yyDollar[1].scalarExpression, yyDollar[3].scalarExpression)
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:189
		{
			yyVAL.scalarExpression = yyDollar[1].aggregate
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:193
		{
			yyVAL.aggregate = newAggregate(aggregateCount, nil)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:194
		{
			yyVAL.aggregate = newAggregate(aggregateMax, yyDollar[3].fieldExpression)
		}
	case 61:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:195
		{
			yyVAL.aggregate = newAggregate(aggregateMin, yyDollar[3].fieldExpression)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:196
		{
			yyVAL.aggregate = newAggregate(aggregateAvg, yyDollar[3].fieldExpression)
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line expr.y:197
		{
			yyVAL.aggregate = newAggregate(aggregateSum, yyDollar[3].fieldExpression)
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:204
		{
			yyVAL.fieldExpression = yyDollar[2].fieldExpression
		}
	case 65:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:205
		{
			yyVAL.fieldExpression = newBinaryOperation(opAdd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 66:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:206
		{
			yyVAL.fieldExpression = newBinaryOperation(opSub, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:207
		{
			yyVAL.fieldExpression = newBinaryOperation(opMult, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:208
		{
			yyVAL.fieldExpression = newBinaryOperation(opDiv, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:209
		{
			yyVAL.fieldExpression = newBinaryOperation(opMod, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 70:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:210
		{
			yyVAL.fieldExpression = newBinaryOperation(opEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:211
		{
			yyVAL.fieldExpression = newBinaryOperation(opNotEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:212
		{
			yyVAL.fieldExpression = newBinaryOperation(opLess, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:213
		{
			yyVAL.fieldExpression = newBinaryOperation(opLessEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:214
		{
			yyVAL.fieldExpression = newBinaryOperation(opGreater, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 75:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:215
		{
			yyVAL.fieldExpression = newBinaryOperation(opGreaterEqual, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 76:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:216
		{
			yyVAL.fieldExpression = newBinaryOperation(opRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:217
		{
			yyVAL.fieldExpression = newBinaryOperation(opNotRegex, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:218
		{
			yyVAL.fieldExpression = newBinaryOperation(opPower, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:219
		{
			yyVAL.fieldExpression = newBinaryOperation(opAnd, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:220
		{
			yyVAL.fieldExpression = newBinaryOperation(opOr, yyDollar[1].fieldExpression, yyDollar[3].fieldExpression)
		}
	case 81:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:221
		{
			yyVAL.fieldExpression = newUnaryOperation(opSub, yyDollar[2].fieldExpression)
		}
	case 82:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:222
		{
			yyVAL.fieldExpression = newUnaryOperation(opNot, yyDollar[2].fieldExpression)
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:223
		{
			yyVAL.fieldExpression = yyDollar[1].static
		}
	case 84:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:224
		{
			yyVAL.fieldExpression = yyDollar[1].intrinsicField
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:225
		{
			yyVAL.fieldExpression = yyDollar[1].attributeField
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:232
		{
			yyVAL.static = newStaticString(yyDollar[1].staticStr)
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:233
		{
			yyVAL.static = newStaticInt(yyDollar[1].staticInt)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:234
		{
			yyVAL.static = newStaticFloat(yyDollar[1].staticFloat)
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:235
		{
			yyVAL.static = newStaticBool(true)
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:236
		{
			yyVAL.static = newStaticBool(false)
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:237
		{
			yyVAL.static = newStaticNil()
		}
	case 92:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:238
		{
			yyVAL.static = newStaticDuration(yyDollar[1].staticDuration)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:239
		{
			yyVAL.static = newStaticStatus(statusOk)
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:240
		{
			yyVAL.static = newStaticStatus(statusError)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:241
		{
			yyVAL.static = newStaticStatus(statusUnset)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:245
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicStart)
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:246
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicEnd)
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:247
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicDuration)
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:248
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicChildCount)
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:249
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicName)
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:250
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicStatus)
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line expr.y:251
		{
			yyVAL.intrinsicField = newIntrinsic(intrinsicParent)
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line expr.y:255
		{
			yyVAL.attributeField = newAttribute(yyDollar[2].staticStr)
		}
	case 104:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:256
		{
			yyVAL.attributeField = newScopedAttribute(attributeScopeResource, yyDollar[3].staticStr)
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:257
		{
			yyVAL.attributeField = newScopedAttribute(attributeScopeSpan, yyDollar[3].staticStr)
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:258
		{
			yyVAL.attributeField = newScopedAttribute(attributeScopeParent, yyDollar[3].staticStr)
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
//line expr.y:259
		{
			yyVAL.attributeField = appendAttribute(yyDollar[1].attributeField, yyDollar[3].staticStr)
		}
	}
	goto yystack /* stack new state and value */
}
