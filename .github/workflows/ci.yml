name: CI
on:
  pull_request:

concurrency:
  group: "${{ github.ref_name }}-${{ github.head_ref }}"
  cancel-in-progress: true

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      skip-job: ${{ steps.set-output.outputs.skip-job }}
    env:
      EXCLUDED_PATHS: "CHANGELOG.md|docs/"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get list of changed files
        id: changed-files
        run: |
          git fetch --prune --unshallow
          changed_files=$(git diff --name-only HEAD^ HEAD)

      - name: Determine if only excluded files or directories have changed
        id: set-output
        run: |
          excluded_paths="${{ env.EXCLUDED_PATHS }}"
          changed_files="${{ steps.changed-files.outputs.files }}"

          # Convert excluded_paths to a regex pattern
          excluded_regex=$(echo "$excluded_paths" | sed 's/|/\\|/g')

          # Check if any file outside of excluded paths has changed
          skip_job=true
          for file in $changed_files; do
            if [[ ! "$file" =~ $excluded_regex ]]; then
              skip_job=false
              break
            fi
          done

          if [ "$skip_job" = true ]; then
            echo "::set-output name=skip-job::true"
          else
            echo "::set-output name=skip-job::false"
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip-job == 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: check-fmt
        run: make check-fmt

      - name: check-jsonnetfmt
        run: make check-jsonnetfmt

      - name: lint
        run: make lint base=origin/${{github.base_ref}}

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: check-changes
    strategy:
      matrix:
        test-target:
          [
            test-with-cover-pkg,
            test-with-cover-tempodb,
            test-with-cover-tempodb-wal,
            test-with-cover-others,
          ]

    steps:
      - name: Check out code
        if: needs.check-changes.outputs.skip-job == 'false'
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        if: needs.check-changes.outputs.skip-job == 'false'
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Run Tests
        if: needs.check-changes.outputs.skip-job == 'false'
        run: make ${{ matrix.test-target }}

  integration-tests:
    name: Run integration tests
    runs-on: ubuntu-latest
    needs: check-changes
    strategy:
      matrix:
        test-target:
          [
            test-e2e,
            test-integration-poller,
            test-e2e-deployments,
            test-e2e-serverless,
          ]

    steps:
      - name: Check out code
        if: needs.check-changes.outputs.skip-job == 'false'
        uses: actions/checkout@v4
      - name: Set up Go 1.22
        if: needs.check-changes.outputs.skip-job == 'false'
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
      - name: Run Test
        if: needs.check-changes.outputs.skip-job == 'false'
        run: make ${{ matrix.test-target }}

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip-job == 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Build Tempo
        run: make tempo

      - name: Build tempo-query
        run: make tempo-query

      - name: Build vulture
        run: make tempo-vulture

      - name: Build tempo-cli
        run: make tempo-cli

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip-job == 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Bench
        run: make test-bench

  vendor-check:
    name: Vendor check
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip-job == 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check vendor
        run: make vendor-check

  tempo-jsonnet:
    name: Check jsonnet & tempo-mixin
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.skip-job == 'false'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go 1.22
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Check jsonnet
        run: make jsonnet-check

      - name: Check tempo-mixin
        run: make tempo-mixin-check

      - name: Test jsonnet
        run: make jsonnet-test

  build-technical-documentation:
    name: Build technical documentation
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Build Website
        run: docker run -v ${PWD}/docs/sources:/hugo/content/docs/tempo/latest --rm grafana/docs-base:latest make prod
